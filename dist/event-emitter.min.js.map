{"version":3,"sources":["event-emitter.min.js"],"names":["root","factory","define","amd","exports","module","EventEmitter","this","clone","listeners","i","length","cloned","Array","indexOf","listener","fn","splice","index","j","k","pop","emitter","on","addListener","type","scope","once","TypeError","_getListeners","Error","that","fired","push","wrapper","data","removeListener","call","emit","l","removeAllListeners","events","_events","event","listenerCount"],"mappings":"CAAE,SAASA,EAAMC,GACO,kBAAXC,SAAyBA,OAAOC,IACzCD,UAAWD,GACiB,gBAAZG,SAChBC,OAAOD,QAAUH,IAEjBD,EAAKM,aAAeL,KAEtBM,KAAM,WACR,YAgMA,SAASC,GAAMC,GAIb,IAHA,GAAIC,GAAID,EAAUE,OACdC,EAAS,GAAIC,OAAMH,GAEhBA,KACLE,EAAOF,GAAKD,EAAUC,EAGxB,OAAOE,GAST,QAASE,GAAQL,EAAWM,GAG1B,IAFA,GAAIL,GAAID,EAAUE,OAEXD,KACL,GAAIK,IAAaN,EAAUC,GAAGM,GAC5B,MAAON,EAIX,OAAO,GAQT,QAASO,GAAOR,EAAWS,GACzB,IAAK,GAAIR,GAAIQ,EAAOC,EAAIT,EAAI,EAAGU,EAAIX,EAAUE,OAAYS,EAAJD,IAAST,IAAKS,EACjEV,EAAUC,GAAKD,EAAUU,EAG3BV,GAAUY,MA1LZ,GAAIC,KA6LJ,OAnLAA,GAAQC,GACRD,EAAQE,YAAc,SAASC,EAAMV,EAAUW,EAAOC,GACpD,GAAwB,kBAAbZ,GACT,KAAM,IAAIa,UAGZ,IAAInB,GAAYF,KAAKsB,cAAcJ,EAEnC,IAAIhB,EAAUE,QAA2C,KAAjCG,EAAQL,EAAWM,GACzC,KAAM,IAAIe,MAGZ,IAAIJ,KAAU,GAAQC,KAAS,EAAM,CACnC,GAAII,GAAOxB,KACPyB,GAAQ,CAEZvB,GAAUwB,MACRjB,GAAI,QAASkB,GAAQC,GACnBJ,EAAKK,eAAeX,EAAMS,GACrBF,IACHA,GAAQ,EACRjB,EAASsB,KAAKX,MAAaS,KAG/BT,eAIFjB,GAAUwB,MACRjB,GAAID,EACJW,MAAOA,OAIX,OAAOnB,OASTe,EAAQgB,KAAO,SAASb,EAAMU,GAC5B,GAAI1B,GAAYF,KAAKsB,cAAcJ,EAEnC,IAAIhB,EAAUE,OAAQ,CACpBF,EAAYD,EAAMC,EAElB,KAAK,GAAiCM,GAA7BL,EAAI,EAAG6B,EAAI9B,EAAUE,OAAsB4B,EAAJ7B,IAASA,EACvDK,EAAWN,EAAUC,GACrBK,EAASC,GAAGqB,KAAKtB,EAASW,MAAOS,GAIrC,MAAO5B,OASTe,EAAQc,eAAiB,SAASX,EAAMV,GACtC,GACIG,GADAT,EAAYF,KAAKsB,cAAcJ,EAUnC,OAPIhB,GAAUE,SACZO,EAAQJ,EAAQL,EAAWM,GACb,KAAVG,GACFD,EAAOR,EAAWS,IAIfX,MAQTe,EAAQkB,mBAAqB,SAASf,GACpC,GAAoB,gBAATA,GAAmB,CAC5B,GAAIhB,GAAYF,KAAKsB,cAAcJ,EACnChB,GAAUE,OAAS,MAEhB,IAAoB,mBAATc,GAAsB,CACpC,GAAIgB,GAASlC,KAAKmC,OAClB,KAAK,GAAIC,KAASF,GAChBA,EAAOE,GAAOhC,OAAS,EAI3B,MAAOJ,OAQTe,EAAQb,UAAY,SAASgB,GAC3B,GAAIhB,GAAYF,KAAKsB,cAAcJ,EACnC,OAAOhB,GAAUE,OAASH,EAAMC,OAQlCa,EAAQsB,cAAgB,SAASnB,GAC/B,GAAIhB,GAAYF,KAAKsB,cAAcJ,EACnC,OAAOhB,GAAUE,QASnBW,EAAQO,cAAgB,SAASJ,GAC/B,GAAIhB,GAAYF,KAAKmC,QAAQjB,EAC7B,KAAKhB,EACH,KAAM,IAAIqB,OAAM,4CAA8CL,EAAO,mBAEvE,OAAOhB,IAkDFH","file":"event-emitter.min.js","sourcesContent":[";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.EventEmitter = factory();\n  }\n}(this, function() {\n'use strict';\n\n\n/**\n * @name eventEmitter\n *\n * @param {string|string[]} eventTypes\n * @param {Object} [object]\n *\n */\nfunction eventEmitter(eventTypes, object) { // eslint-disable-line no-unused-vars\n  var events = {};\n\n  if (typeof eventTypes === 'string') {\n    events[eventTypes] = [];\n  }\n  else if (Array.isArray(eventTypes) && eventTypes.length) {\n    for (var i = 0, l = eventTypes.length; i < l; ++i) {\n      events[eventTypes[i]] = [];\n    }\n  }\n  else {\n    throw new TypeError('EventEmitter : {string|string[]} `eventTypes` is required');\n  }\n\n  if (object) {\n    var keys = Object.keys(emitter),\n        n = keys.length,\n        key;\n\n    while (n--) {\n      key = keys[n];\n      object[key] = emitter[key];\n    }\n  }\n  else {\n    object = Object.create(emitter); // eslint-disable-line no-param-reassign\n  }\n\n  object._events = events;\n\n  return object;\n}\n\n\nvar emitter = {};\n\n\n/**\n * @param {string} type\n * @param {Function} listener\n * @param {boolean|Object} [scope]\n * @param {boolean} [once]\n * @returns emitter\n */\nemitter.on =\nemitter.addListener = function(type, listener, scope, once) {\n  if (typeof listener !== 'function') {\n    throw new TypeError();\n  }\n\n  var listeners = this._getListeners(type);\n\n  if (listeners.length && indexOf(listeners, listener) !== -1) {\n    throw new Error();\n  }\n\n  if (scope === true || once === true) {\n    var that = this,\n        fired = false;\n\n    listeners.push({\n      fn: function wrapper(data) {\n        that.removeListener(type, wrapper);\n        if (!fired) {\n          fired = true;\n          listener.call(scope || {}, data);\n        }\n      },\n      scope: {}\n    });\n  }\n  else {\n    listeners.push({\n      fn: listener,\n      scope: scope || {}\n    });\n  }\n\n  return this;\n};\n\n\n/**\n * @param {string} type\n * @param {*} data\n * @returns emitter\n */\nemitter.emit = function(type, data) {\n  var listeners = this._getListeners(type);\n\n  if (listeners.length) {\n    listeners = clone(listeners);\n\n    for (var i = 0, l = listeners.length, listener; i < l; ++i) {\n      listener = listeners[i];\n      listener.fn.call(listener.scope, data);\n    }\n  }\n\n  return this;\n};\n\n\n/**\n * @param {string} type\n * @param {Function} listener\n * @returns emitter\n */\nemitter.removeListener = function(type, listener) {\n  var listeners = this._getListeners(type),\n      index;\n\n  if (listeners.length) {\n    index = indexOf(listeners, listener);\n    if (index !== -1) {\n      splice(listeners, index);\n    }\n  }\n\n  return this;\n};\n\n\n/**\n * @param {string} [type]\n * @returns emitter\n */\nemitter.removeAllListeners = function(type) {\n  if (typeof type === 'string') {\n    var listeners = this._getListeners(type);\n    listeners.length = 0;\n  }\n  else if (typeof type === 'undefined') {\n    var events = this._events;\n    for (var event in events) {\n      events[event].length = 0;\n    }\n  }\n\n  return this;\n};\n\n\n/**\n * @param {string} type\n * @returns {Array}\n */\nemitter.listeners = function(type) {\n  var listeners = this._getListeners(type);\n  return listeners.length ? clone(listeners) : [];\n};\n\n\n/**\n * @param {string} type\n * @returns {number}\n */\nemitter.listenerCount = function(type) {\n  var listeners = this._getListeners(type);\n  return listeners.length;\n};\n\n\n/**\n * @param {string} type\n * @returns {Array}\n * @throws {Error}\n */\nemitter._getListeners = function(type) {\n  var listeners = this._events[type];\n  if (!listeners) {\n    throw new Error('EventEmitter#_getListeners : event type `' + type + '` does not exist');\n  }\n  return listeners;\n};\n\n\n/**\n * @param {Array} listeners\n * @returns {Array}\n */\nfunction clone(listeners) {\n  var i = listeners.length,\n      cloned = new Array(i);\n\n  while (i--) {\n    cloned[i] = listeners[i];\n  }\n\n  return cloned;\n}\n\n\n/**\n * @param {Array} listeners\n * @param {Object} listener\n * @returns {number}\n */\nfunction indexOf(listeners, listener) {\n  var i = listeners.length;\n\n  while (i--) {\n    if (listener === listeners[i].fn) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * @param {Array} listeners\n * @param {number} index\n */\nfunction splice(listeners, index) {\n  for (var i = index, j = i + 1, k = listeners.length; j < k; ++i, ++j) {\n    listeners[i] = listeners[j];\n  }\n\n  listeners.pop();\n}\n\nreturn EventEmitter;\n}));\n"],"sourceRoot":"/source/"}