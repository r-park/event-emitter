{"version":3,"sources":["event-emitter.min.js"],"names":["root","factory","define","amd","exports","module","EventEmitter","this","types","events","_events","Array","isArray","length","TypeError","i","l","clone","listeners","cloned","indexOf","listener","fn","splice","index","j","k","pop","proto","prototype","addListener","type","scope","_getListeners","Error","push","addListenerOnce","wrapper","data","that","removeListener","fired","call","emit","removeAllListeners","event","listenerCount"],"mappings":"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","file":"event-emitter.min.js","sourcesContent":["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.EventEmitter = factory();\n  }\n}(this, function() {\n'use strict';\n\n\n/**\n * @name EventEmitter\n * @constructor\n *\n * @param {string|string[]} types\n *\n */\nfunction EventEmitter(types) {\n  var events = this._events = {};\n\n  if (typeof types === 'string') {\n    events[types] = [];\n  }\n  else if (Array.isArray(types) && types.length) {\n    for (var i = 0, l = types.length; i < l; ++i) {\n      events[types[i]] = [];\n    }\n  }\n  else {\n    throw new TypeError();\n  }\n}\n\n\nvar proto = EventEmitter.prototype;\n\n\n/**\n * @param {string} type\n * @param {Function} listener\n * @param {Object} [scope]\n * @returns {EventEmitter}\n */\nproto.addListener = function(type, listener, scope) {\n  if (typeof listener !== 'function') {\n    throw new TypeError();\n  }\n\n  var listeners = this._getListeners(type);\n\n  if (listeners.length && indexOf(listeners, listener) !== -1) {\n    throw new Error();\n  }\n\n  listeners.push({fn: listener, scope: scope || {}});\n\n  return this;\n};\n\n\n/**\n * @param {string} type\n * @param {Function} listener\n * @param {Object} [scope]\n * @returns {EventEmitter}\n */\nproto.addListenerOnce = function(type, listener, scope) {\n  if (typeof listener !== 'function') {\n    throw new TypeError();\n  }\n\n  var that = this,\n      fired = false;\n\n  function wrapper(data) {\n    that.removeListener(type, wrapper);\n    if (!fired) {\n      fired = true;\n      listener.call(scope || {}, data);\n    }\n  }\n\n  this.addListener(type, wrapper);\n\n  return this;\n};\n\n\n/**\n * @param {string} type\n * @param {*} data\n * @returns {EventEmitter}\n */\nproto.emit = function(type, data) {\n  var listeners = this._getListeners(type);\n\n  if (listeners.length) {\n    listeners = clone(listeners);\n\n    for (var i = 0, l = listeners.length, listener; i < l; ++i) {\n      listener = listeners[i];\n      listener.fn.call(listener.scope, data);\n    }\n  }\n\n  return this;\n};\n\n\n/**\n * @param {string} type\n * @param {Function} listener\n * @returns {EventEmitter}\n */\nproto.removeListener = function(type, listener) {\n  var listeners = this._getListeners(type),\n      index;\n\n  if (listeners.length) {\n    index = indexOf(listeners, listener);\n    if (index !== -1) {\n      splice(listeners, index);\n    }\n  }\n\n  return this;\n};\n\n\n/**\n * @param {string} [type]\n * @returns {EventEmitter}\n */\nproto.removeAllListeners = function(type) {\n  if (type) {\n    var listeners = this._getListeners(type);\n    listeners.length = 0;\n  }\n  else {\n    var events = this._events;\n    for (var event in events) {\n      events[event].length = 0;\n    }\n  }\n\n  return this;\n};\n\n\n/**\n * @param {string} type\n * @returns {Array}\n */\nproto.listeners = function(type) {\n  var listeners = this._getListeners(type);\n  return listeners.length ? clone(listeners) : [];\n};\n\n\n/**\n * @param {string} type\n * @returns {number}\n */\nproto.listenerCount = function(type) {\n  var listeners = this._getListeners(type);\n  return listeners.length;\n};\n\n\n/**\n * @param {string} type\n * @returns {Array}\n * @throws {Error}\n */\nproto._getListeners = function(type) {\n  var listeners = this._events[type];\n  if (!listeners) {\n    throw new Error();\n  }\n  return listeners;\n};\n\n\n/**\n * @param {Array} listeners\n * @returns {Array}\n */\nfunction clone(listeners) {\n  var i = listeners.length,\n      cloned = new Array(i);\n\n  while (i--) {\n    cloned[i] = listeners[i];\n  }\n\n  return cloned;\n}\n\n\n/**\n * @param {Array} listeners\n * @param {Object} listener\n * @returns {number}\n */\nfunction indexOf(listeners, listener) {\n  var i = listeners.length;\n\n  while (i--) {\n    if (listener === listeners[i].fn) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * @param {Array} listeners\n * @param {number} index\n */\nfunction splice(listeners, index) {\n  for (var i = index, j = i + 1, k = listeners.length; j < k; ++i, ++j) {\n    listeners[i] = listeners[j];\n  }\n\n  listeners.pop();\n}\n\nreturn EventEmitter;\n}));\n"],"sourceRoot":"/source/"}